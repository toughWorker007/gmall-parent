1.myBatisPlus:
    1.mp默认的id增长方式是雪花算法相关。
    2.varchar可接收bigint,bigint不可接收varchar;
    3.@TableId(value = "id", type = IdType.ID_WORKER_STR)
        此时String类型的id可加入bigint字段。
    4.设计数据库
      		a.表的命名最好是"业务名称_表的作用" 如edu_teacher
      		b.表必备三字段：id, gmt_create, gmt_modified
      		c.表字段如果有多个单词组成 需要有下划线分割 因为在利用mp逆向工程的时候转换成驼峰式
    5.controller返给页面时间字符串少了8小时：
            @ResponseBody 把对象转换为JSON的时少了8小时
      			spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
      			spring.jackson.time-zone=GMT+8
    6.自写多表查询的sql：
        select * from edu_course a
        left join edu_course_description b on a.id=b.id
        left join edu_teacher c on a.teacher_id=c.id
        left join edu_subject d on a.parent_subject_id=d.id
        left join edu_subject e on a.child_subject_id=e.id
        where a.id=18
2.es6:
    1.模板字符串_字符串拼接：
        console.log(`${var1}and${var2}`)
    2.模块调用：
        引入同目录文件login.js的login和regist函数：
        login.js:
            export default{
                login(){
                    console.log(login..)
                }
                register(){
                    console.log("register,,")
                }
            }
        main.js:
            import login from "./login.js"。
            login.login();
            login.register();

                错误：SyntaxError: Unexpected identifier由于es6兼容问题
                    babel es6v2.0 -d es5
3.node.js:
    1.空文件夹初始化：npm init -y。
    2.npm config set registry https://registry.npm.taobao.org。
    3.npm install --global babel-cli。
4.vue:
    1.created
        页面一加载的时候就可以调用这个方法，取得页面一些初始值
    2.mounted
        页面数据已经渲染完成
    3.渲染
        内存内的数据加载到页面。
        可以进行简写为[:],单向绑定。
    4.条件渲染
        v-if
            利用内存进行计算 适用于页面经常变化的情况 只使用一次结果
        v-show
            适用于页面不怎么变化 缓存页面数据 性能更高一些
    5.标签属性：
        1.v-model;
        2.v-for;
5.模板：
    1.[{npm install},{npm install echarts --save},{npm install axios}];
    2.学习使用模板
        a.首先阅读readme文件
            https://panjiachen.gitee.io/vue-admin-template
        b.学习教程
            https://juejin.im/post/6844903476661583880
        c.重要目录结构
            config		配置开发和线上环境 如访问地址的baseurl
            static		静态资源或者是第三方资源
            api			定义访问后端路径的uri
            components	放置组件的一个目录
            router		定义路径与页面之间的一种对应关系
            views		定义页面的文件夹
    3.http请求状态码(面试题)
      		200		请求成功
      		304		未修改 代表使用了缓存
      		403		没有权限访问
      		404		资源未找到(路径有可能有问题)
      		500		服务内部有问题
    4.删除时拿讲师id:
        scope.row.id
    5.修改时拿讲师id:
        this.$route.params.teacherId;(固定写法)
    6.查询时排序：
        wrapper.orderByDesc("gmt_create");
    7.axios封装：
        1.request.js引入了axios;
          [import axios from 'axios'
          // 创建axios实例
          const service = axios.create({
              baseURL: "http://127.0.0.1:6868", // api 的 base_url
              timeout: 5000 // 请求超时时间
          })
          export default service//对外暴露常量]

        2.二级js引入了request:
            [import request from '@/utils/request'
            //暴露函数
            export default {
                //1.查询banner数据
                getAllBanner() {
                    return request({
                        url: '/edu/front/getAllBanner',
                        method: 'get'
                    })
                },
            }]

        3.一级js引入二级js:
            [<script>
             import teacher from "@/api/teacher";
             export default {
               //类似于created
               asyncData({ params }) {
                 return teacher.queryTeacherPage(1,3).then(response => {
                   //理解为data
                   return {
                     retMap: response.data.data
                   };
                 });
               },
               methods: {
                   gotoPage(pageNum){
                      teacher.queryTeacherPage(pageNum,3)
                      .then(response=>{
                         this.retMap=response.data.data;
                      })
                   }
               }
             };
             </script>]

        4.page拿数据也要数据对外暴露：
            export default{...};

    8.前端模板封装BASE_API:
        1.修改config-->dev.env.js
            BASE_API: '"http://127.0.0.1:6868"',
        2.修改form页面
            :url="BASE_API+'/oss/uploadFile'"
                多个地方双引号之间放的是变量。
        3.data区：
            BASE_API:process.env.BASE_API。
6.nginx相关命令
    (nginx.exe所在目录打开cmd执行命令)
    重启
        nginx -s reload
    关闭
        nginx -s stop
    启动
        双击图标

7.引入nginx:
    1.改nginx配置文件
        1.location ~ /edu/ {
            proxy_pass http://127.0.0.1:8000;
        }#代表着ip:port/edu/*;
        location ~ /oss/ {
            proxy_pass http://127.0.0.1:8001;
        }#代表着ip:port/oss/*;
    2.前端模板文件：
        1.修改config-->dev.env.js
            BASE_API: '"http://127.0.0.1:6868"',
        2.修改form页面
            :url="BASE_API+'/oss/uploadFile'"
        3.data区：
            BASE_API:process.env.BASE_API。
